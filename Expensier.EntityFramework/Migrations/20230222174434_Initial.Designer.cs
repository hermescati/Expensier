// <auto-generated />
using System;
using Expensier.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Expensier.EntityFramework.Migrations
{
    [DbContext(typeof(ExpensierDbContext))]
    [Migration("20230222174434_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("Expensier.Domain.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Account_Holder_Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Account_Holder_Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Expensier.Domain.Models.CryptoAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Account_Id")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<double>("Purchase_Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("Account_Id");

                    b.ToTable("CryptoAssets");
                });

            modelBuilder.Entity("Expensier.Domain.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Account_Id")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<string>("Company_Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Due_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subscription_Plan")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subscription_Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Account_Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Expensier.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Account_Id")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<bool>("Is_Credit")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Process_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Transaction_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Transaction_Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Account_Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Expensier.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date_Joined")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("First_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Last_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password_Hash")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Expensier.Domain.Models.Account", b =>
                {
                    b.HasOne("Expensier.Domain.Models.User", "Account_Holder_")
                        .WithMany()
                        .HasForeignKey("Account_Holder_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account_Holder_");
                });

            modelBuilder.Entity("Expensier.Domain.Models.CryptoAsset", b =>
                {
                    b.HasOne("Expensier.Domain.Models.Account", "Account_")
                        .WithMany("CryptoAssetList")
                        .HasForeignKey("Account_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Expensier.Domain.Models.Crypto", "Crypto", b1 =>
                        {
                            b1.Property<int>("CryptoAssetId")
                                .HasColumnType("INTEGER");

                            b1.Property<double?>("ChangesPercentage")
                                .HasColumnType("REAL");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.Property<double?>("Price")
                                .HasColumnType("REAL");

                            b1.Property<string>("Symbol")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CryptoAssetId");

                            b1.ToTable("CryptoAssets");

                            b1.WithOwner()
                                .HasForeignKey("CryptoAssetId");
                        });

                    b.Navigation("Account_");

                    b.Navigation("Crypto")
                        .IsRequired();
                });

            modelBuilder.Entity("Expensier.Domain.Models.Subscription", b =>
                {
                    b.HasOne("Expensier.Domain.Models.Account", "Account_")
                        .WithMany("SubscriptionList")
                        .HasForeignKey("Account_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account_");
                });

            modelBuilder.Entity("Expensier.Domain.Models.Transaction", b =>
                {
                    b.HasOne("Expensier.Domain.Models.Account", "Account_")
                        .WithMany("TransactionList")
                        .HasForeignKey("Account_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account_");
                });

            modelBuilder.Entity("Expensier.Domain.Models.Account", b =>
                {
                    b.Navigation("CryptoAssetList");

                    b.Navigation("SubscriptionList");

                    b.Navigation("TransactionList");
                });
#pragma warning restore 612, 618
        }
    }
}
